import "../sensapp.thingml"
import "../timer.thingml"


/*****************************************************************************
 * Definition of the built-in things and messages
 *****************************************************************************/
 
thing fragment LinuxSensapp includes SensApp
@c_header "
#include <stdio.h>
#include <time.h>
#include <stdlib.h>"
@c_global "
long int timestamp() {
	return time(NULL);
}

char* exec(const char* command) {
	FILE* fp;
	char* result = NULL;
	size_t len = 0;

	fflush(NULL);
	fp = popen(command, \"r\");
	if (fp == NULL) {
		printf(\"Cannot execute command: %s\\n\", command);
		return;
	}

	while(getline(&result, &len, fp) != -1) {
		fputs(result, stdout);
	}

	free(result);
	fflush(fp);
	if (pclose(fp) != 0) {
		perror(\"Cannot close stream.\\n\");
	}
	return result;
}
"
{
    
    property server : String = "http://internal.sensapp.org"
    property p : String = "8080"
    
    function checkConnection() : Integer do
    '
	char command[1024];
	sprintf(command, "curl %s:%s/sensapp", ' & server & ', ' & p & ');
	if (system(command) != 0) {//sensapp does not respond
		perror("Cannot reach sensapp!\n");
		if (system("curl http://www.google.com") != 0) {//even google does not respond
			perror("Cannot even reach google\n");
			return -2;
		}
		return -1;
	}
	return 0;  
    '
    end

    function register(node : String, sensor : String) do
    if (checkConnection() == 0) do
    '
	 char json[4096];
     sprintf(json, "{\"id\":\"%s/%s\", \"descr\":\"ThingML device\", \"schema\": {\"backend\":\"raw\", \"template\":\"Numerical\"}}", ' & node & ', ' & sensor & ');
	
	 char url[1024];
     sprintf(url, "%s:%s/sensapp/registry/sensors", ' & server & ', ' & p & ');
	
	 char command[5135];
	 sprintf(command, "curl -s --data \'%s\' --header \'Content-Type: application/json; charset=ISO-8859-1\' %s", json, url);

	 exec(command);	
    '
    end
    end
    
    function push(node : String, sensor : String, value : Integer, unit : String) do
	if (checkConnection() == 0) do
    '
        char data[5120];
        sprintf(data, "{\"bn\":\"%s/%s\", \"bu\":\"%s\", \"e\":[{\"v\":%d, \"t\":%d}]}", ' & node & ', ' & sensor & ', ' & unit & ', ' & value & ', timestamp());
        char command[6144];
	    sprintf(command, "curl -s --request PUT --data \'%s\' --header \'Content-Type: application/senml+json; charset=ISO-8859-1\' %s:%s/sensapp/dispatch", data, ' & server & ', ' & p & ');

        //TODO: we need to parse the result of the command and return a proper status (int)

	   exec(command);
    '
        sensapp!donePush()
    end
    ' else {'//dirty hack, as ThingML does not support else
        sensapp!failPush()
    '}'
    end
    
    function pushRaw(data : String) : Integer do
	if (checkConnection() == 0) do
    '
        char command[6144];
	    sprintf(command, "curl --request PUT --data \'%s\' --header \'Content-Type: application/senml+json; charset=ISO-8859-1\' %s:%s/sensapp/dispatch", ' & data & ', ' & server & ', ' & p & ');

        //TODO: we need to parse the result of the command and return a proper status (int)

        printf("\n%s\n\n", command);
	   exec(command);
    '
        sensapp!donePushRaw()
    end
    ' else {'//dirty hack, as ThingML does not support else
        sensapp!failPushRaw()
    '}'    
    end
    
    statechart LinuxSensappImpl init Running {

		state Running {
				
			internal event m : sensapp?registerSensor
			action do 
                register(m.node, m.sensor)
			end

            internal event m : sensapp?pushData
            action do
                push(m.node, m.sensor, m.value, m.unit)
            end		
            
            internal event m : sensapp?pushRawData
            action do
                pushRaw(m.data)
            end	
		}		
	}	

}