import "../../../core/serializer.thingml"
import "../../../core/timer.thingml"
import "../../../core/comm.thingml"
import "../../../core/_scala/serializer.thingml"
import "../../../core/_scala/comm.thingml"
import "../../../core/_scala/timer.thingml"

import "../weatherAPI.thingml"


thing WeatherStation includes RemoteMonitoringMsgs, TimerClient
{    
    provided port RemoteControlIn 
    {
        receives temperature, light    
    }
    
    provided port RemoteControlOut
    {
        sends changeDisplay
    }
    
    statechart SensorsDisplayImpl init Process
   	{   		
       state Process {
           
         on entry do
           timer!timer_start(2000)//Change display every 2s
         end
           
        internal event t : RemoteControlIn?temperature
        action do
            print("Temperature is: " + t.temp)
        end
        
        internal event l : RemoteControlIn?light
        action do
            print("Light is: " + l.light)
        end
        
        transition -> Process 
        event t : timer?timer_timeout
        action do
            print("Changing Display on Arduino")
            RemoteControlOut!changeDisplay()
        end            
       }
        
    }
   
}





//Generated by ThingML

thing fragment RemoteMsgs includes RemoteMonitoringMsgs{
//message remote_changeDisplay();//code=20
//message remote_turnOff();//code=22
//message report_light(t : UInt16);//code=11
//message remote_turnOn();//code=21
//message report_temperature(t : UInt16);//code=10
}

thing MessageSerializer includes SerializerScala, ArraySerializer, RemoteMsgs {
required port RemoteControl{
receives changeDisplay
}

statechart SerializerBehavior init Serialize {
state Serialize{
internal event m : RemoteControl?changeDisplay action
do
setHeader(20, 0)
send()
end

}
}

}

thing MessageDeserializer includes DeserializerScala, ArraySerializer, RemoteMsgs {
required port RemoteControl{
sends temperature, light
}

function forward() do
index = DATA_POSITION
readonly var code : Byte = buffer[CODE_POSITION]
if (code == 10) do
deserializeRemote_temperature()
end
if (code == 11) do
deserializeRemote_light()
end
end

function deserializeRemote_temperature()
do
readonly var t : UInt16 = deserializeUInt16()
print("t: " + t)
RemoteControl!temperature(t)
end

function deserializeRemote_light()
do
readonly var t : UInt16 = deserializeUInt16()
print("l: " + t)
RemoteControl!light(t)
end


statechart receive init Idle {
state Idle {
internal event m : in?receive_bytes
action receive(m.b)
}
}

}

//END Generated by ThingML





configuration JavaNode
@remote "app::.*::RemoteControl::.*"
{
    instance app : WeatherStation
        
    instance deserializer : MessageDeserializer
    instance serializer : MessageSerializer
    instance serial : SerialScala
        set serial.serialPort = "COM8"
    
    // Clock needed by the timer
	// Timer needed by the Canary driver
	instance t : TimerScala
    connector app.timer => t.timer
    
    connector deserializer.in => serial.IOStream
    connector deserializer.RemoteControl => app.RemoteControlIn
    connector serializer.out => serial.IOStream
    connector serializer.RemoteControl => app.RemoteControlOut
}