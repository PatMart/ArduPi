/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated.kevoree;
import org.thingml.generated.*;
import org.kevoree.annotation.*;
import org.thingml.java.*;
import org.thingml.java.ext.*;


@ComponentType
 @Library(name = "ThingML")
 public class KWeatherStation extends WeatherStation{//The Kevoree wrapper extends the associated ThingML component
//Attributes
@Param (defaultValue = "2000")
private int WeatherStation_rate__var = 2000;
//Getters and Setters for non readonly/final attributes
@Override
public int getWeatherStation_rate__var() {
return WeatherStation_rate__var;
}

@Override
public void setWeatherStation_rate__var(int WeatherStation_rate__var) {
this.WeatherStation_rate__var = WeatherStation_rate__var;
}

@Output
private org.kevoree.api.Port RemoteControlOutPort_out;
@Output
private org.kevoree.api.Port timerPort_out;
//Empty Constructor
public KWeatherStation() {
super();//binding internal connectors we do not want to expose to Kevoree
}

//Constructor (all attributes)
public KWeatherStation(String name, final int WeatherStation_rate__var) {
super(name, WeatherStation_rate__var);
}

@Override
public void start() {
queue = new java.util.concurrent.ArrayBlockingQueue<Event>(1024);
super.start();
}

@Override
public void stop() {
super.stop();
queue = null;
}

@Override
public void receive(Event event, Port p) {
if (queue != null) {
super.receive(event, p);
}
}

@Start
public void startComponent() {
if (behavior == null){
buildBehavior();
}
start();
}

@Stop
public void stopComponent() {stop();
}

@Override
public void send(Event e, Port p) {
if (p.getName().equals("RemoteControlOut")) {
RemoteControlOutPort_out.send(e);
}
else if (p.getName().equals("timer")) {
timerPort_out.send(e);
}
else {//Internal channel managed by ThingML
super.send(e, p);
}
}

@Input
public void RemoteControlInPort(Object o) {
receive((Event)o, getRemoteControlIn_port());
}

@Input
public void timerPort(Object o) {
receive((Event)o, getTimer_port());
}

}

