/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;


/**
 * Definition for type : TimerJava
 **/
public class TimerJava extends Component implements org.thingml.timer.TimerObserver {

//Attributes
private final java.util.Timer TimerJava_javaTimer__var;
private java.util.TimerTask TimerJava_javaTimerTask__var;
//Ports
private Port timer_port;
//Message types
private final Timer_startMessageType timer_startType = new Timer_startMessageType();
private final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
private final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
//Empty Constructor
public TimerJava() {
super(1);
TimerJava_javaTimer__var = new java.util.Timer();
}

//Constructor (only readonly (final) attributes)
public TimerJava(final java.util.Timer TimerJava_javaTimer__var) {
super(1);
this.TimerJava_javaTimer__var = TimerJava_javaTimer__var;
}

//Constructor (all attributes)
public TimerJava(String name, final java.util.Timer TimerJava_javaTimer__var, final java.util.TimerTask TimerJava_javaTimerTask__var) {
super(name, 1);
this.TimerJava_javaTimer__var = TimerJava_javaTimer__var;
this.TimerJava_javaTimerTask__var = TimerJava_javaTimerTask__var;
}

//Getters and Setters for non readonly/final attributes
public java.util.Timer getTimerJava_javaTimer__var() {
return TimerJava_javaTimer__var;
}

public java.util.TimerTask getTimerJava_javaTimerTask__var() {
return TimerJava_javaTimerTask__var;
}

public void setTimerJava_javaTimerTask__var(java.util.TimerTask TimerJava_javaTimerTask__var) {
this.TimerJava_javaTimerTask__var = TimerJava_javaTimerTask__var;
}

//Getters for Ports
public Port getTimer_port() {
return timer_port;
}
private CompositeState buildTimerJava_SoftTimer(){
final List<AtomicState> states_TimerJava_SoftTimer = new ArrayList<AtomicState>();
final AtomicState state_TimerJava_SoftTimer_default = new AtomicState("default")
{
@Override
public void onEntry() {
System.out.println("Timer ready!");
}

};
states_TimerJava_SoftTimer.add(state_TimerJava_SoftTimer_default);
final List<Region> regions_TimerJava_SoftTimer = new ArrayList<Region>();
final List<Handler> transitions_TimerJava_SoftTimer = new ArrayList<Handler>();
transitions_TimerJava_SoftTimer.add(new InternalTransition("start",timer_startType, timer_port, state_TimerJava_SoftTimer_default){
@Override
public boolean doCheck(final Event e) {
final Timer_startMessageType.Timer_startMessage ce = (Timer_startMessageType.Timer_startMessage) e;
return ce.delay > 0;
}

@Override
public void doExecute(final Event e) {
final Timer_startMessageType.Timer_startMessage ce = (Timer_startMessageType.Timer_startMessage) e;
{
System.out.println("timer start");
start((short)ce.delay);
}
}

});
transitions_TimerJava_SoftTimer.add(new InternalTransition("cancel",timer_cancelType, timer_port, state_TimerJava_SoftTimer_default){
@Override
public void doExecute(final Event e) {
final Timer_cancelMessageType.Timer_cancelMessage ce = (Timer_cancelMessageType.Timer_cancelMessage) e;
cancel();
}

});
final CompositeState state_TimerJava_SoftTimer = new CompositeState("SoftTimer", states_TimerJava_SoftTimer, state_TimerJava_SoftTimer_default, transitions_TimerJava_SoftTimer, regions_TimerJava_SoftTimer, false);
return state_TimerJava_SoftTimer;
}

public Component buildBehavior() {
//Init ports
final List<EventType> inEvents_timer = new ArrayList<EventType>();
final List<EventType> outEvents_timer = new ArrayList<EventType>();
inEvents_timer.add(timer_startType);
inEvents_timer.add(timer_cancelType);
outEvents_timer.add(timer_timeoutType);
timer_port = new Port(PortType.PROVIDED, "timer", inEvents_timer, outEvents_timer, 0);
//Init state machine
behavior = buildTimerJava_SoftTimer();
return this;
}

@Override
public void onTimeout() {
{
send(timer_timeoutType.instantiate(timer_port), timer_port);
}
}
private void cancel() {
{
if( !(getTimerJava_javaTimerTask__var() == null)) {
{
getTimerJava_javaTimerTask__var().cancel();
setTimerJava_javaTimerTask__var((java.util.TimerTask) (null));
}

}
getTimerJava_javaTimer__var().purge();
}
}
private void start(short TimerJava_start_delay__var) {
{
cancel();
setTimerJava_javaTimerTask__var((java.util.TimerTask) (new org.thingml.timer.ThingMLTimerTask(this)));
getTimerJava_javaTimer__var().schedule(getTimerJava_javaTimerTask__var(), (long)TimerJava_start_delay__var);
}
}
}

