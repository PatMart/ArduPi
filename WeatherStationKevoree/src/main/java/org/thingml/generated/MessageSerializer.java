/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;


/**
 * Definition for type : MessageSerializer
 **/
public class MessageSerializer extends Component  {

//Attributes
private final byte PacketManager_lengthInteger__var;
private final byte PacketManager_lengthString__var;
private final byte PacketManager_lengthUInt16__var;
private final short PacketManager_MAX_PACKET_SIZE__var;
private final byte PacketManager_START_BYTE__var;
private final byte PacketManager_STOP_BYTE__var;
private final byte PacketManager_ESCAPE_BYTE__var;
private int PacketManager_CODE_POSITION__var;
private int PacketManager_LENGTH_POSITION__var;
private int PacketManager_DATA_POSITION__var;
private byte[] PacketManager_buffer__var;
private int PacketManager_index__var;
//Ports
private Port RemoteControl_port;
private Port out_port;
//Message types
private final Write_bytesMessageType write_bytesType = new Write_bytesMessageType();
private final TemperatureMessageType temperatureType = new TemperatureMessageType();
private final LightMessageType lightType = new LightMessageType();
private final ChangeDisplayMessageType changeDisplayType = new ChangeDisplayMessageType();
//Empty Constructor
public MessageSerializer() {
super(2);
PacketManager_lengthInteger__var = 2;
PacketManager_lengthString__var = 8;
PacketManager_lengthUInt16__var = 2;
PacketManager_MAX_PACKET_SIZE__var = 16;
PacketManager_START_BYTE__var = 0x12;
PacketManager_STOP_BYTE__var = 0x13;
PacketManager_ESCAPE_BYTE__var = 0x7D;
PacketManager_CODE_POSITION__var = 3;
PacketManager_LENGTH_POSITION__var = 4;
PacketManager_DATA_POSITION__var = 5;
PacketManager_index__var = 0;
}

//Constructor (only readonly (final) attributes)
public MessageSerializer(final byte PacketManager_lengthInteger__var, final byte PacketManager_lengthString__var, final byte PacketManager_lengthUInt16__var, final short PacketManager_MAX_PACKET_SIZE__var, final byte PacketManager_START_BYTE__var, final byte PacketManager_STOP_BYTE__var, final byte PacketManager_ESCAPE_BYTE__var) {
super(2);
this.PacketManager_lengthInteger__var = PacketManager_lengthInteger__var;
this.PacketManager_lengthString__var = PacketManager_lengthString__var;
this.PacketManager_lengthUInt16__var = PacketManager_lengthUInt16__var;
this.PacketManager_MAX_PACKET_SIZE__var = PacketManager_MAX_PACKET_SIZE__var;
this.PacketManager_START_BYTE__var = PacketManager_START_BYTE__var;
this.PacketManager_STOP_BYTE__var = PacketManager_STOP_BYTE__var;
this.PacketManager_ESCAPE_BYTE__var = PacketManager_ESCAPE_BYTE__var;
}

//Constructor (all attributes)
public MessageSerializer(String name, final byte PacketManager_lengthInteger__var, final byte PacketManager_lengthString__var, final byte PacketManager_lengthUInt16__var, final short PacketManager_MAX_PACKET_SIZE__var, final byte PacketManager_START_BYTE__var, final byte PacketManager_STOP_BYTE__var, final byte PacketManager_ESCAPE_BYTE__var, final int PacketManager_CODE_POSITION__var, final int PacketManager_LENGTH_POSITION__var, final int PacketManager_DATA_POSITION__var, final byte[] PacketManager_buffer__var, final int PacketManager_index__var) {
super(name, 2);
this.PacketManager_lengthInteger__var = PacketManager_lengthInteger__var;
this.PacketManager_lengthString__var = PacketManager_lengthString__var;
this.PacketManager_lengthUInt16__var = PacketManager_lengthUInt16__var;
this.PacketManager_MAX_PACKET_SIZE__var = PacketManager_MAX_PACKET_SIZE__var;
this.PacketManager_START_BYTE__var = PacketManager_START_BYTE__var;
this.PacketManager_STOP_BYTE__var = PacketManager_STOP_BYTE__var;
this.PacketManager_ESCAPE_BYTE__var = PacketManager_ESCAPE_BYTE__var;
this.PacketManager_CODE_POSITION__var = PacketManager_CODE_POSITION__var;
this.PacketManager_LENGTH_POSITION__var = PacketManager_LENGTH_POSITION__var;
this.PacketManager_DATA_POSITION__var = PacketManager_DATA_POSITION__var;
this.PacketManager_buffer__var = PacketManager_buffer__var;
this.PacketManager_index__var = PacketManager_index__var;
}

//Getters and Setters for non readonly/final attributes
public byte getPacketManager_lengthInteger__var() {
return PacketManager_lengthInteger__var;
}

public byte getPacketManager_lengthString__var() {
return PacketManager_lengthString__var;
}

public byte getPacketManager_lengthUInt16__var() {
return PacketManager_lengthUInt16__var;
}

public short getPacketManager_MAX_PACKET_SIZE__var() {
return PacketManager_MAX_PACKET_SIZE__var;
}

public byte getPacketManager_START_BYTE__var() {
return PacketManager_START_BYTE__var;
}

public byte getPacketManager_STOP_BYTE__var() {
return PacketManager_STOP_BYTE__var;
}

public byte getPacketManager_ESCAPE_BYTE__var() {
return PacketManager_ESCAPE_BYTE__var;
}

public int getPacketManager_CODE_POSITION__var() {
return PacketManager_CODE_POSITION__var;
}

public void setPacketManager_CODE_POSITION__var(int PacketManager_CODE_POSITION__var) {
this.PacketManager_CODE_POSITION__var = PacketManager_CODE_POSITION__var;
}

public int getPacketManager_LENGTH_POSITION__var() {
return PacketManager_LENGTH_POSITION__var;
}

public void setPacketManager_LENGTH_POSITION__var(int PacketManager_LENGTH_POSITION__var) {
this.PacketManager_LENGTH_POSITION__var = PacketManager_LENGTH_POSITION__var;
}

public int getPacketManager_DATA_POSITION__var() {
return PacketManager_DATA_POSITION__var;
}

public void setPacketManager_DATA_POSITION__var(int PacketManager_DATA_POSITION__var) {
this.PacketManager_DATA_POSITION__var = PacketManager_DATA_POSITION__var;
}

public byte[] getPacketManager_buffer__var() {
return PacketManager_buffer__var;
}

public void setPacketManager_buffer__var(byte[] PacketManager_buffer__var) {
this.PacketManager_buffer__var = PacketManager_buffer__var;
}

public int getPacketManager_index__var() {
return PacketManager_index__var;
}

public void setPacketManager_index__var(int PacketManager_index__var) {
this.PacketManager_index__var = PacketManager_index__var;
}

//Getters for Ports
public Port getRemoteControl_port() {
return RemoteControl_port;
}
public Port getOut_port() {
return out_port;
}
private CompositeState buildMessageSerializer_SerializerBehavior(){
final List<AtomicState> states_MessageSerializer_SerializerBehavior = new ArrayList<AtomicState>();
final AtomicState state_MessageSerializer_SerializerBehavior_Serialize = new AtomicState("Serialize")
{
@Override
public void onEntry() {
System.out.println("Coder ready indeed!");
}

};
states_MessageSerializer_SerializerBehavior.add(state_MessageSerializer_SerializerBehavior_Serialize);
final List<Region> regions_MessageSerializer_SerializerBehavior = new ArrayList<Region>();
final List<Handler> transitions_MessageSerializer_SerializerBehavior = new ArrayList<Handler>();
transitions_MessageSerializer_SerializerBehavior.add(new InternalTransition("Handler_1463957105",changeDisplayType, RemoteControl_port, state_MessageSerializer_SerializerBehavior_Serialize){
@Override
public void doExecute(final Event e) {
final ChangeDisplayMessageType.ChangeDisplayMessage ce = (ChangeDisplayMessageType.ChangeDisplayMessage) e;
{
System.out.println("Serializing changeDisplay message");
setHeader((byte)20, (byte)0);
send();
}
}

});
final CompositeState state_MessageSerializer_SerializerBehavior = new CompositeState("SerializerBehavior", states_MessageSerializer_SerializerBehavior, state_MessageSerializer_SerializerBehavior_Serialize, transitions_MessageSerializer_SerializerBehavior, regions_MessageSerializer_SerializerBehavior, false){
@Override
public void onEntry() {
{
PacketManager_buffer__var = new byte[16];
System.out.println("Coder ready!");
}
super.onEntry();
}

}
;
return state_MessageSerializer_SerializerBehavior;
}

public Component buildBehavior() {
//Init ports
final List<EventType> inEvents_RemoteControl = new ArrayList<EventType>();
final List<EventType> outEvents_RemoteControl = new ArrayList<EventType>();
inEvents_RemoteControl.add(changeDisplayType);
RemoteControl_port = new Port(PortType.REQUIRED, "RemoteControl", inEvents_RemoteControl, outEvents_RemoteControl, 0);
final List<EventType> inEvents_out = new ArrayList<EventType>();
final List<EventType> outEvents_out = new ArrayList<EventType>();
outEvents_out.add(write_bytesType);
out_port = new Port(PortType.REQUIRED, "out", inEvents_out, outEvents_out, 1);
//Init state machine
behavior = buildMessageSerializer_SerializerBehavior();
return this;
}

private void serializeInteger(short SerializerJava_serializeInteger_d__var) {
{
java.nio.ByteBuffer bb = java.nio.ByteBuffer.allocate(2);
        bb.putShort(SerializerJava_serializeInteger_d__var);
        for(Byte b : bb.array()) {
		storeByte((byte)b);}
}
}
private void serializeUInt16(short SerializerJava_serializeUInt16_d__var) {
{
serializeInteger((short)SerializerJava_serializeUInt16_d__var);
}
}
private byte[] escape() {
{
byte[] escaped__var = new byte[34];
final short stop__var = (short) (getPacketManager_DATA_POSITION__var() + PacketManager_buffer__var[getPacketManager_LENGTH_POSITION__var()]
);

short i__var = (short) (0);

short j__var = (short) (0);

escaped__var[j__var] = getPacketManager_START_BYTE__var();
j__var = (short) (j__var + 1);
byte current__var = 0;
while(i__var < stop__var) {
{
current__var = (byte) (PacketManager_buffer__var[i__var]
);
if(current__var == getPacketManager_START_BYTE__var() || current__var == getPacketManager_STOP_BYTE__var() || current__var == getPacketManager_ESCAPE_BYTE__var()) {
{
escaped__var[j__var] = getPacketManager_ESCAPE_BYTE__var();
j__var = (short) (j__var + 1);
}

}
escaped__var[j__var] = current__var;
j__var = (short) (j__var + 1);
i__var = (short) (i__var + 1);
}

}
escaped__var[j__var] = getPacketManager_STOP_BYTE__var();
return escaped__var;
}
}
private void send() {
{
send(write_bytesType.instantiate(out_port, (byte[]) escape()), out_port);
}
}
private void setHeader(byte PacketManager_setHeader_code__var, byte PacketManager_setHeader_length__var) {
{
setPacketManager_index__var((int) (0));
storeByte((byte)1);
storeByte((byte)0);
storeByte((byte)0);
setPacketManager_CODE_POSITION__var((int) (getPacketManager_index__var()));
storeByte((byte)PacketManager_setHeader_code__var);
setPacketManager_LENGTH_POSITION__var((int) (getPacketManager_index__var()));
storeByte((byte)PacketManager_setHeader_length__var);
setPacketManager_DATA_POSITION__var((int) (getPacketManager_index__var()));
setPacketManager_index__var((int) (getPacketManager_DATA_POSITION__var()));
}
}
private void storeByte(byte PacketManager_storeByte_b__var) {
{
if(getPacketManager_index__var() == getPacketManager_MAX_PACKET_SIZE__var()) {
{
System.err.println("BUFFER OVERFLOW: " + PacketManager_storeByte_b__var + " has been ignored. Current index = " + getPacketManager_index__var());
}

}
if(getPacketManager_index__var() < getPacketManager_MAX_PACKET_SIZE__var()) {
{
PacketManager_buffer__var[getPacketManager_index__var()] = PacketManager_storeByte_b__var;
setPacketManager_index__var((int) (getPacketManager_index__var() + 1));
}

}
}
}
private byte readByte() {
{
byte b__var = 0;
if(getPacketManager_index__var() < getPacketManager_MAX_PACKET_SIZE__var()) {
{
b__var = (byte) (PacketManager_buffer__var[getPacketManager_index__var()]
);
setPacketManager_index__var((int) (getPacketManager_index__var() + 1));
}

}
if(getPacketManager_index__var() == getPacketManager_MAX_PACKET_SIZE__var()) {
{
System.err.println("BUFFER OVERFLOW: trying to read out of buffer boundaries");
b__var = (byte) (getPacketManager_STOP_BYTE__var());
}

}
return b__var;
}
}
}

