import "../db.thingml"


/*****************************************************************************
 * Definition of the built-in things and messages
 *****************************************************************************/
 
 datatype Timestamp
 @c_type "long int";
 
thing fragment LinuxDB includes DB 
@c_header "
#include <stdio.h>
#include <time.h>
#include \"mongo.h\"
"
@c_global "
mongo conn[1];
bson b[1];
"
{
    property baseTime : Timestamp = 0

    function createBT() do
    '
    printf("Creating base time\n");'
    baseTime = timestamp()
    'bson_init( b );
    bson_append_long(b, "bt", ' & baseTime &');'
    pushEntry("gateway.base")    
    end

    function initBT() do
    '
    mongo_cursor cursor[1];
    mongo_cursor_init(cursor, conn, "gateway.base" );

    if( mongo_cursor_next( cursor ) == MONGO_OK ) {
        bson_print( &cursor->current );
        bson_iterator iterator[1];
        if ( bson_find( iterator, mongo_cursor_bson( cursor ), "bt" )) {//base time is present in DB'
            baseTime = 'bson_iterator_long( iterator );
            printf("Base time fetched from DB\n");
        } else {' 
            createBT()
        '}
    } else {'
        createBT()
    '}

    mongo_cursor_destroy( cursor );
    '
    end

    function init_db() : Integer do
    '
    int status = mongo_client( conn, "127.0.0.1", 27017 );
    if( status != MONGO_OK ) {
      switch ( conn->err ) {
        case MONGO_CONN_NO_SOCKET:  printf( "no socket\n" ); return 1;
        case MONGO_CONN_FAIL:       printf( "connection failed\n" ); return 1;
        case MONGO_CONN_NOT_MASTER: printf( "not master\n" ); return 1;
      }
      return conn->err;
    } else {'
       initBT()
	   'return 0;
    }
    '
    end
    
    function destroy() : Integer do
    '
	mongo_destroy( conn );
	bson_destroy( b );
	return 0;    
    '
    end
    
    function timestamp() : Timestamp do
    '
    return time(NULL);
    '
    end
    
    function initEntry() do
    '
	bson_init( b );
    bson_append_long(b, "t", ' & timestamp() - baseTime & ');    
    '
    end
    
    function pushEntry(db : String) : Integer do
    '
    printf("pushing data to: %s\n", ' & db & ');
    mongo_write_concern options[1];
    mongo_write_concern_init(options);
    options->w = 1;//ack
    options->j = 1;//journaled
    mongo_write_concern_finish(options);

    bson_finish( b );'
    var status : Integer = 'mongo_insert( conn, ' & db & ', b, options);
    bson_destroy( b );
    mongo_write_concern_destroy(options);
    '
    return status
    end
    
    function push_int(node : String, sensor : String, value : Integer) do
	initEntry()
    'bson_append_int(b, ' & sensor & ', ' & value & ');'
	pushEntry(getDbName(node, sensor))
    end
    
    function getDbName(node : String, sensor : String) : String do
    '
    char* dbName[256];
    sprintf(dbName, "%s.%s", ' & node & ', ' & sensor & ');
    return dbName;
    '
    end
    
    statechart LinuxDBImpl init Running {
	
		state Running {
				
			internal event m : db?db_init
			action do 
                if (init_db() == 0) do
                    db!db_init_done()
                end
			end


            internal event m : db?push_int
            action do
                push_int(m.db, m.sensor, m.value)
            end			
		}
		
	}	

}