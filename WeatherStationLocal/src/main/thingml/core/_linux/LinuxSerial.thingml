/**
 * Linux Simple Serial Port Component.
 *
 * TODO:
 * - Add handler to close the serial device
 * - Add code to parameterize baudrate (now fixed to 9600)
 * - Add message to querry the device connection status
 * - Maybe add auto-reconnect feature
 *
 * 
 * Greatly inspired from: http://todbot.com/arduino/host/arduino-serial/arduino-serial.c
 */

import "../Serial.thingml"
 
thing LinuxSerial includes Serial
@c_header "
#include <string.h> // string function definitions
#include <fcntl.h> // File control definitions
#include <errno.h> // Error number definitions
#include <termios.h> // POSIX terminal control definitions
#include <time.h>   // time calls

#define TIMEOUT 10 // timeout waiting for messages from the serial device
#define INPUT_BUFFER_SIZE 128 // for possible future optimizations"
{

	function open_serial(device : String, baudrate : Int16) : Integer do
		'int result;
        struct termios port_settings;
	
		printf("Opening Serial device at %s...\n", '&device&');
		result = open('&device&', O_RDWR | O_NOCTTY | O_NDELAY);
	
		if (result < 0) {
			perror("Error opening Serial port");
		}
		else if (tcgetattr(result, &port_settings) < 0) {// try to get current options
			perror("Error opening Serial port: could not get serial port attributes");
		}
		else {
			printf("Configuring port %s...\n", '&device&');
	
	
            // set IO baud rates to 9600 (same as on the Arduino side)
			cfsetispeed(&port_settings, B9600);
			cfsetospeed(&port_settings, B9600);
	            
            // 8N1
            port_settings.c_cflag &= ~PARENB;
            port_settings.c_cflag &= ~CSTOPB;
            port_settings.c_cflag &= ~CSIZE;
            port_settings.c_cflag |= CS8;
            // no flow control
            port_settings.c_cflag &= ~CRTSCTS;

            port_settings.c_cflag |= CREAD | CLOCAL;  // turn on READ & ignore ctrl lines
            port_settings.c_iflag &= ~(IXON | IXOFF | IXANY); // turn off s/w flow ctrl

            port_settings.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG); // make raw
            port_settings.c_oflag &= ~OPOST; // make raw

            // see: http://unixwiz.net/techtips/termios-vmin-vtime.html
            port_settings.c_cc[VMIN]  = 0;
            port_settings.c_cc[VTIME] = 20;

            if (tcsetattr(result, TCSANOW, &port_settings) < 0 ) {
                perror("Error opening Serial port: could not set serial port attributes");
            }

		    sleep(1); // wait a bit
        }'
		return 'result'
	
	end

	function send_byte(device : Integer, byte: UInt8) : Integer do
		'int n;
		unsigned char data[1];
		data[0] = '& byte &';
        
		n = write('& device &', data, 1);
		if (n < 0) {
			perror("Error writing to Serial device");
			return -1;
		}
		return 0;'
	end

	function start_receiver_process(device : Integer) 
	@fork_linux_thread "true"
	do
		'char buffer[INPUT_BUFFER_SIZE]; // Data read from the ESUSMS device

		int n; // used to store the results of select and read
		int i; // loop index
	
		while (1) {
	
			fd_set rdfs;		// The file descriptor to wait on
			FD_ZERO( &rdfs );
			FD_SET( '& device &', &rdfs ); // set to the esusms fd
	
			n = select('& device &'+1, &rdfs, NULL, NULL, NULL); // NO Timeout here (last parameter)
	
			if (n < 0) {
				perror("Error waiting for incoming data from Serial device");
				break;
			}
			else if (n == 0) { // timeout
				printf("Timeout waiting for incoming data from Serial device\n");
				break;
			}
			else { // there is something to read
	
				n = read('& device &', &buffer, INPUT_BUFFER_SIZE * sizeof(char));
	
				if (n<0) {
					perror("Error reading from Serial device");
					break;
				}
				else if (n==0) {
					printf("Nothing to read from Serial device\n"); // Should never happen unless there are too many transmission errors with wrong CRCs
					break;
				}
				else { // There are n incoming bytes in buffer
					for (i = 0; i<n; i++) {
						'serial!serial_rx('buffer[i]')'
					}
				}
			}
		}'
		serial!serial_closed()
	end
	
	statechart LinuxSerialImpl init Running {
	
		property serial_device : Integer
	
		state Running {
				
			internal event m : serial?serial_open
			action do 
				serial_device = open_serial(m.device, m.baudrate)
                if (serial_device > 0) do
                    start_receiver_process(serial_device)
				    serial!serial_opened()
                end
			end
			
			internal event c : serial?serial_tx
			action send_byte(serial_device, c.b)
		}
		
	}	 

}